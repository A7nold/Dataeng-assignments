1.   SELECT * from CITY where COUNTRYCODE = 'USA' and POPULATION > 100000;

2.   SELECT NAME from CITY where COUNTRYCODE = 'USA' and POPULATION > 120000;

3.   SELECT * from CITY;

4.   SELECT * from CITY where ID = 1661;

5.   SELECT * from CITY where COUNTRYCODE = 'JPN';

6.   SELECT NAME from CITY where COUNTRYCODE = 'JPN';

7.   SELECT CITY,STATE from STATION;

8.   SELECT CITY from STATION where ID/2 = 0;

9:   SELECT COUNT(CITY) - COUNT(DISTINCT CITY) as difference_city
     from STATION; 
     
10.  select CITY,LENGTH(CITY) as SMALL from STATION ORDER BY SMALL,CITY  LIMIT 1;

     select CITY,LENGTH(CITY) as SMALL from STATION ORDER BY SMALL DESC,CITY  LIMIT 1;
     
11.  Select DISTINCT CITY From STATION Where CITY LIKE 'a%' OR CITY LIKE 'e%' OR CITY LIKE 'i%' OR CITY LIKE 'o%' OR CITY LIKE 'u%';

12.  Select DISTINCT CITY From STATION Where CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u';

13.  Select DISTINCT CITY From STATION Where CITY NOT LIKE 'a%' OR CITY NOT LIKE 'e%' OR CITY NOT LIKE 'i%' OR CITY NOT LIKE 'o%' OR CITY NOT LIKE 'u%';

14.  Select DISTINCT CITY From STATION Where CITY NOT LIKE '%a' OR CITY NOT LIKE '%e' OR CITY NOT LIKE '%i' OR CITY NOT LIKE '%o' OR CITY NOT LIKE '%u';

15.  SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[aeiou]$' or CITY REGEXP '^[aeiou]';

16.  SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[aeiou]$' and CITY REGEXP '^[aeiou]';

17.  select p.product_id,p.product_name
     from Product p 
     where product_id not in(select s.product_id from sales s where s.sale_date not between '2019-01-01' and '2019-03-31');
     
18.  select distinct author_id as id
     from Views
     where author_id = viewer_id
     order by id;
     
19.  select round(avg(case when order_date = customer_pref_delivery_date then 1 else 0)*100,2) as immediate_percentage from delivery;

20.  select ad_id,ifnull(round(avg(case when action = "Clicked" then 1 when action = "Viewed" then 0 else null end) * 100,2),0) as ctr
     from Ads
     group by ad_id
     order by ctr desc, ad_id asc;

21.  select *,
     COUNT(Team_id) over(PARTITION BY Team_id ) as team_size
     from employees
     ORDER BY emp_id;
     
22.  select c.country_name, (
     case when w.avg_temperature <= 15 then 'Cold'
         when w.avg_temperature >= 25 then 'Hot'
         else 'Warm' end
     ) as weather_type
     from (
        select country_id, avg(weather_state) as avg_temperature from Weather
            where day between '2019-11-01' and '2019-11-30'
        group by country_id
     ) as w
        inner join Countries c
        on w.country_id = c.country_id;

23.  Select d.product_id, round((sum(price*units)+0.00)/(sum(units)+0.00),2) as average_price
     from(
     Select *
     from prices p
     natural join 
     unitssold u
     where u.purchase_date between p.start_date and p.end_date) d
     group by d.product_id;
     
24.  select player_id,event_date as first_login
     from Activity
     group by player_id
     having min(event_date);

25.  select player_id,device_id
     from Activity
     group by player_id
     having min(event_date);

26.  SELECT p.product_name, 
            o.unit 
     FROM   (SELECT product_id, 
               Sum(unit) AS unit 
        FROM   orders 
        WHERE  order_date BETWEEN '2020-02-01' AND '2020-02-29' 
        GROUP  BY product_id 
        HAVING unit >= 100) o 
     INNER JOIN products p 
               ON o.product_id = p.product_id;

27.  select * from Users
     where mail REGEXP '^[a-zA-A]+[a-zA-Z0-9_\./\-]*@leetcode\.com$';
     
28.  select o.customer_id, name
     from
     Orders o
     join
     Product p
     on o.product_id = p.product_id
     join
     Customers c
     on o.customer_id = c.customer_id
     group by 1, 2
     having sum(case when date_format(order_date, '%Y-%m')='2020-06'
     then price*quantity end) >= 100
     and 
     sum(case when date_format(order_date, '%Y-%m')='2020-07'
     then price*quantity end) >= 100;

29.  select distinct title 
     from Content join TVProgram on Content.content_id = TVProgram.content_id
     where Kids_content = 'Y' and content_type = 'Movies' and month(program_date) = '06';
     
30.  select q.id, q.year, ifnull(n.npv, 0) as npv from Queries q
     left join NPV n 
     on q.id = n.id and q.year = n.year;

31.  select q.id, q.year, ifnull(n.npv, 0) as npv from Queries q
     left join NPV n 
     on q.id = n.id and q.year = n.year;
     
32.  select e.unique_id, emp.name
     from employees emp left join employeesUNI e on emp.id = e.id;
      
33.  select u.name, ifnull(sum(r.distance),0) as  travelled_distance
     from users u left join Rides r on u.id = r.user_id
     group by r.user_id
     order by travelled_distance desc,u.name asc;
     
34.  SELECT p.product_name, 
            o.unit 
     FROM   (SELECT product_id, 
               Sum(unit) AS unit 
        FROM   orders 
        WHERE  order_date BETWEEN '2020-02-01' AND '2020-02-29' 
        GROUP  BY product_id 
        HAVING unit >= 100) o 
     INNER JOIN products p 
               ON o.product_id = p.product_id;
     
35. (
    select name results
    from Movie_Rating natural join Users
    group by Users.user_id
    order by count(*) desc, name asc
    limit 1
    )
    union
    (
    select Movies.title results
    from Movie_Rating natural join Movies
    where month(created_at)='2'
    group by Movies.movie_id
    order by avg(rating) desc, title asc
    limit 1
    );

36.  select u.name, ifnull(sum(r.distance),0) as  travelled_distance
     from users u left join Rides r on u.id = r.user_id
     group by r.user_id
     order by travelled_distance desc,u.name asc;
     
37.  select e.unique_id, emp.name
     from employees emp left join employeesUNI e on emp.id = e.id;
     
38.  select id, name from Students where department_id not in (select id from Departments);

39.  SELECT LEAST(from_id,to_id) as person1,
     GREATEST(from_id,to_id) as person2,
     COUNT(*) as call_count,
     SUM(duration) as total_duration
     FROM Calls
     GROUP BY person1, person2;
     
40.  Select d.product_id, round((sum(price*units)+0.00)/(sum(units)+0.00),2) as average_price
     from(
     Select *
     from prices p
     natural join 
     unitssold u
     where u.purchase_date between p.start_date and p.end_date) d
     group by d.product_id;
     
41.  select warehouse_name, sum(volume) as volume 
     from (select w.name as warehouse_name, w.product_id, w.units * Width * Length * Height as volume
     from Warehouse w left join Products p on w.product_id = p.product_id) t 
     group by warehouse_name;
    
42.  Select sale_date, sold_num-sold as diff
     from 
     ((select *
     from sales
     where fruit = 'apples') a
     join 
     (select sale_date as sale, fruit, sold_num as sold
     from sales
     where fruit = 'oranges') b
     on a.sale_date = b.sale) 

43.  SELECT round(sum(CASE
                      WHEN t1.event_date = t2.first_event+1 THEN 1
                      ELSE 0
                      END)/count(DISTINCT t1.player_id), 2) AS fraction
     FROM Activity AS t1
     INNER JOIN
     (SELECT player_id, min(event_date) AS first_event
     FROM Activity
     GROUP BY player_id) AS t2 ON t1.player_id = t2.player_id;
     
44.  select b.Name
     from Employee a left join Employee b on b.Id = a.ManagerId
     group by b.Name
     having COUNT(b.id) > 4;

45.  select d.dept_name,ifnull(s.count_d,0) as student_number
     from
     (select dept_id,count(student_id) as count_d
     from student
     group by dept_id) s right join department d on s.dept_id = d.dept_id;

46.  SELECT
     customer_id
     FROM Customer
     GROUP BY customer_id
     HAVING COUNT( DISTINCT product_key) = (SELECT COUNT(*) FROM Product);
     
47.  SELECT
     project_id,
     employee_id
     FROM (
     SELECT
        p.project_id,
        p.employee_id,
        DENSE_RANK() OVER(PARTITION BY p.project_id ORDER BY e.experience_years DESC) as rnk
     FROM project as p JOIN employee as e
     ON p.employee_id = e.employee_id
     ) x
     WHERE rnk = 1;
     
48.  SELECT
     p.product_id    AS product_id,
     SUM(o.quantity) AS qty
     FROM
     product p
     LEFT JOIN
     orders o
     ON
     o.product_id = p.product_id
     WHERE
     o.dispach_date >= today() - DATE_ADD(today(), -1, 'year')
     AND p.available_from < today() - DATE_ADD(today(), -1, 'month')
     GROUP BY
     p.product_id
     HAVING
     SUM(o.quantity) < 10;
     
49.  SELECT
     student_id,
     course_id,
     grade
     FROM (
     SELECT
     student_id,
     course_id,
     grade,
     DENSE_RANK() OVER(PARTITION BY student_id ORDER BY grade DESC, course_id) as rnk
     FROM enrollments
     ) x
     WHERE rnk=1
     ORDER BY student_id;
     
50.  WITH tb1 AS (
     SELECT first_player AS player, first_score as score
     FROM Matches
     UNION ALL
     SELECT second_player, second_score
     FROM Matches
     ),
     tb2 AS (
     SELECT p.player_id, p.group_id, SUM(tb1.score) AS tp
     FROM Players p
     LEFT JOIN tb1
     ON p.player_id = tb1.player
     GROUP BY p.player_id, p.group_id
     )
     SELECT group_id, player_id
     FROM (
     SELECT player_id, group_id,
        ROW_NUMBER() OVER (PARTITION BY group_id ORDER BY tp DESC, player_id) AS r
     FROM tb2
     ) tb3
     WHERE r = 1;

     
     
     
     
     
     
     




