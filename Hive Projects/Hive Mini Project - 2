Objective - The assignment is meant for you to apply learnings of the module on Hive on a real-life dataset. One of the major objectives of this assignment is gaining familiarity with how an analysis works in Hive and how you can gain insights from large datasets.
 
Problem Statement - New York City is a thriving metropolis and just like most other cities of similar size, one of the biggest problems its residents face is parking. The classic combination of a huge number of cars and a cramped geography is the exact recipe that leads to a large number of parking tickets.
 
In an attempt to scientifically analyse this phenomenon, the NYC Police Department regularly collects data related to parking tickets. This data is made available by NYC Open Data portal. We will try and perform some analysis on this data.

Download Dataset - https://data.cityofnewyork.us/browse?q=parking+tickets

Note: Consider only the year 2017 for analysis and not the Fiscal year.

                                                                                        Solution
                                                                                        
1: Create a table which stores the above downloaded dataset

create table parking_violations_issued
(
Summons_Number bigint,
Plate_ID string,
Registration_State string,
Plate_Type string,
Issue_Date string,
Violation_Code int,
Vehicle_Body_Type string,
Vehicle_Make string,
Issuing_Agency string,
Street_Code1 int,
Street_Code2 int,
Street_Code3 int,
Vehicle_Expiration string,	
Violation_Location int,
Violation_Precinct int,
Issuer_Precinct int,
Issuer_Code int,
Issuer_Command string,
Issuer_Squad string,
Violation_Time string,
Time_First_Observed string,
Violation_County string,
Violation_In_Front_Of_Or_Opposite string,
House_Number string,
Street_Name string,
Intersecting_Street string,
Date_First_Observed int,
Law_Section int,
Sub_Division string,
Violation_Legal_Code string,
Days_Parking_In_Effect string,
From_Hours_In_Effect string,
To_Hours_In_Effect string,
Vehicle_Color string,
Unregistered_Vehicle int,
Vehicle_Year string,
Meter_Number string,
Feet_From_Curb int,
Violation_Post_Code string,
Violation_Description string,
No_Standing_or_Stopping_Violation string,
Hydrant_Violation string,
Double_Parking_Violation string
)
row format delimited
fields terminated by ','
tblproperties ("skip.header.line.count" = "1");


2: Move data to hive container then copy to namenode and -put in hadoop location

a) docker cp Parking_Violations_Issued_-_Fiscal_Year_2017.csv namenode:Parking_Violations_Issued_-_Fiscal_Year_2017.csv

b) hadoop fs -put Parking_Violations_Issued_-_Fiscal_Year_2017.csv /tmp/hive

3: load data to created table

load data inpath '/tmp/hive/Parking_Violations_Issued_-_Fiscal_Year_2017.csv' into table parking_violations_issued;

4: Extracting year from issue_date

select year(from_unixtime(unix_timestamp(issue_date,'mm/dd/yyyy'), 'yyyy-mm-dd')) as n_year from parking_violations_issued limit 100;

5: Creating table to store only the tickets issued in year 2017

create table parking_violations_issued_2017
(
Summons_Number bigint,
Plate_ID string,
Registration_State string,
Plate_Type string,
Issue_Date string,
Violation_Code int,
Vehicle_Body_Type string,
Vehicle_Make string,
Issuing_Agency string,
Street_Code1 int,
Street_Code2 int,
Street_Code3 int,
Vehicle_Expiration string,
Violation_Location int,
Violation_Precinct int,
Issuer_Precinct int,
Issuer_Code int,
Issuer_Command string,
Issuer_Squad string,
Violation_Time string,
Time_First_Observed string,
Violation_In_Front_Of_Or_Opposite string,
House_Number string,
Street_Name string,
Intersecting_Street string,
Date_First_Observed int,
Law_Section int,
Sub_Division string,
Violation_Legal_Code string,
Days_Parking_In_Effect string,
From_Hours_In_Effect string,
To_Hours_In_Effect string,
Vehicle_Color string,
Unregistered_Vehicle int,
Vehicle_Year string,
Meter_Number string,
Feet_From_Curb int,
Violation_Post_Code string,
Violation_Description string,
No_Standing_or_Stopping_Violation string,
Hydrant_Violation string,
Double_Parking_Violation string
)
COMMENT '8 bucket sorted parking_violations_issued_2017'
partitioned by (Violation_County string)
CLUSTERED BY (Violation_Code) sorted by (Violation_Code) INTO 8 BUCKETS
row format delimited
fields terminated by ','
tblproperties ("skip.header.line.count" = "1");


6: Dynamic Partition properties to enable 

hive>set hive.exec.dynamic.partition=true;
hive>set hive.exec.dynamic.partition.mode=nonstrict; 
hive>set hive.enforce.bucketing = true;

7: Load data in new table

insert into parking_violations_issued_2017 partition(Violation_County) select 
Summons_Number,
Plate_ID,
Registration_State,
Plate_Type,
Issue_Date,
Violation_Code,
Vehicle_Body_Type,
Vehicle_Make,
Issuing_Agency,
Street_Code1,
Street_Code2,
Street_Code3,
Vehicle_Expiration,
Violation_Location,
Violation_Precinct,
Issuer_Precinct,
Issuer_Code,
Issuer_Command,
Issuer_Squad,
Violation_Time,
Time_First_Observed,
Violation_In_Front_Of_Or_Opposite,
House_Number,
Street_Name,
Intersecting_Street,
Date_First_Observed,
Law_Section,
Sub_Division,
Violation_Legal_Code,
Days_Parking_In_Effect,
From_Hours_In_Effect,
To_Hours_In_Effect,
Vehicle_Color,
Unregistered_Vehicle,
Vehicle_Year,
Meter_Number,
Feet_From_Curb,
Violation_Post_Code,
Violation_Description,
No_Standing_or_Stopping_Violation,
Hydrant_Violation,
Double_Parking_Violation,
Violation_County 
from parking_violations_issued where year(from_unixtime(unix_timestamp(issue_date,'mm/dd/yyyy'), 'yyyy-mm-dd')) = 2017;


The analysis can be divided into two parts:
 
Part-I: Examine the data

1.) Find the total number of tickets for the year.
query:  select count(distinct summons_number) No_Tickets from parking_violations_issued_2017;
output:
no_tickets
539901

2.) Find out how many unique states the cars which got parking tickets came from.
query: select count(distinct Registration_State) Reg_state_count from parking_violations_issued_2017;
output:
reg_state_count
63

3.) Some parking tickets donâ€™t have addresses on them, which is cause for concern. Find out how many such tickets there are(i.e. tickets where either "Street Code 1" or "Street Code 2" or "Street Code 3" is empty )
query: select count(distinct summons_number) as No_Tickets_without_address from parking_violations_issued where Street_code1 = 0 or Street_code2 = 0 or Street_code3 = 0;
output:
no_tickets_without_address
350511

Part-II: Aggregation tasks

1.) How often does each violation code occur? (frequency of violation codes - find the top 5)
query: select count(Violation_Code) as frequency_of_violation,Violation_Code from parking_violations_issued_2017 group by Violation_Code order by frequency_of_violation desc limit 5;
output:
frequency_of_violation  violation_code
76296   21
66095   36
53784   38
47178   14
31856   20

2.) How often does each vehicle body type get a parking ticket? How about the vehicle make? (find the top 5 for both)
query a: select Vehicle_Body_Type,count(summons_number)as frequency_of_getting_parking_ticket  from challenge.parking_violations_issued_2017 group by Vehicle_Body_Type order by frequency_of_getting_parking_ticket desc limit 5;
output:
vehicle_body_type       frequency_of_getting_parking_ticket
SUBN    187288
4DSD    153968
VAN     71768
DELV    35600
SDN     19241

query b: select Vehicle_make,count(summons_number)as frequency_of_getting_parking_ticket from challenge.parking_violations_issued_2017 group by Vehicle_make order by frequency_of_getting_parking_ticket desc limit 5;
output:
vehicle_make    frequency_of_getting_parking_ticket
FORD    63184
TOYOT   59910
HONDA   53975
NISSA   45343
CHEVR   35307

3.) A precinct is a police station that has a certain zone of the city under its command. Find the (5 highest) frequencies of:
      a.) Violating Precincts (this is the precinct of the zone where the violation occurred)
      query: select Violation_Precinct,count(*) as IssuedTicket from parking_violations_issued_2017 group by  Violation_Precinct order by IssuedTicket desc limit 6;
      output:
      violation_precinct      issuedticket
      19      27130
      14      20289
      1       17464
      18      16930
      114     14647
      
      b.) Issuer Precincts (this is the precinct that issued the ticket)
      query: select Issuer_Precinct,count(*) as IssuedTicket from parking_violations_issued_2017 group by Issuer_Precinct order by IssuedTicket desc limit 6;
      output:
      issuer_precinct issuedticket
      19      26391
      14      19968
      1       16872
      18      16331
      114     14323
      
4.) Find the violation code frequency across 3 precincts which have issued the most number of tickets - do these precinct zones have an exceptionally high frequency of certain violation codes?
a) Top 3 precints with most number of tickets:
query: select Issuer_Precinct, count(*) as TicketsIssued from parking_violations_issued_2017  group by Issuer_Precinct order by TicketsIssued desc limit 4;
output:
issuer_precinct ticketsissued
19      26391
14      19968
1       16872

b) Violation code frequency of issuer_precint 19
query: select Violation_Code, count(*) as TicketsIssued from parking_violations_issued_2017 where Issuer_Precinct=19 group by Violation_Code order by TicketsIssued desc limit 7;
output:
violation_code  ticketsissued
46      4707
37      3649
38      3574
14      2888
21      2842
20      1479
40      1070

c) Violation code frequency of issuer_precint 14
query: select Violation_Code, count(*) as TicketsIssued from parking_violations_issued_2017 where Issuer_Precinct=14 group by Violation_Code order by TicketsIssued desc limit 7;
output:
violation_code  ticketsissued
14      4395
69      2997
31      2279
47      1855
42      986
46      734
19      702

d) Violation code frequency of issuer_precint 1
query: select Violation_Code, count(*) as TicketsIssued from parking_violations_issued_2017 where Issuer_Precinct=1 group by Violation_Code order by TicketsIssued desc limit 7;
output:
violation_code  ticketsissued
14      3821
16      1871
20      1604
46      1303
38      869
17      793
37      647

5.) Find out the properties of parking violations across different times of the day: The Violation Time field is specified in a strange format. Find a way to make this into a time attribute that you can use to divide into groups.
query: select from_unixtime(unix_timestamp(concat(violation_time,'M'), 'HHmma'),"HH:mma") as date_data from parking_violations_issued_2017 limit 2;
output:
date_data
10:18AM
11:16AM

6.) Divide 24 hours into 6 equal discrete bins of time. The intervals you choose are at your discretion. For each of these groups, find the 3 most commonly occurring violations
query for 6 equal discrete bins of time:
create view vw_parking_violations_2017_partitioned_bins as 
SELECT Summons_Number, Violation_Time, Issuer_Precinct, 
case 
when substring(Violation_Time,1,2) in ('00','01','02','03','12') and upper(substring(Violation_Time,-1))='A' then 1 
when substring(Violation_Time,1,2) in ('04','05','06','07') and upper(substring(Violation_Time,-1))='A' then 2 
when substring(Violation_Time,1,2) in ('08','09','10','11') and upper(substring(Violation_Time,-1))='A' then 3 
when substring(Violation_Time,1,2) in ('12','00','01','02','03') and upper(substring(Violation_Time,-1))='P' then 4 
when substring(Violation_Time,1,2) in ('04','05','06','07') and upper(substring(Violation_Time,-1))='P' then 5 
when substring(Violation_Time,1,2) in ('08','09','10','11') and upper(substring(Violation_Time,-1))='P'then 6 
else null end as Violation_Time_bin,Violation_Code 
from parking_violations_issued_2017  
where Violation_Time is not null;

bin 1 query:
select Violation_Code,count(*) TicketsIssued from vw_parking_violations_2017_partitioned_bins where Violation_Time_bin == 1 group by Violation_Code order by TicketsIssued desc limit 3;
output:
violation_code  ticketsissued
21      3660
40      2584
14      1547

bin 2 query:
select Violation_Code,count(*) TicketsIssued from vw_parking_violations_2017_partitioned_bins where Violation_Time_bin == 2 group by Violation_Code order by TicketsIssued desc limit 3;
output:
violation_code  ticketsissued
14      7250
40      6403
21      5669

bin 3 query:
select Violation_Code,count(*) TicketsIssued from vw_parking_violations_2017_partitioned_bins where Violation_Time_bin == 3 group by Violation_Code order by TicketsIssued desc limit 3;
output:
violation_code  ticketsissued
21      59465
36      37767
38      17587

bin 4 query:
select Violation_Code,count(*) TicketsIssued from vw_parking_violations_2017_partitioned_bins where Violation_Time_bin == 4 group by Violation_Code order by TicketsIssued desc limit 3;
output:
violation_code  ticketsissued
36      28600
38      23877
37      16777

bin 5 query:
select Violation_Code,count(*) TicketsIssued from vw_parking_violations_2017_partitioned_bins where Violation_Time_bin == 5 group by Violation_Code order by TicketsIssued desc limit 3;
output:
violation_code  ticketsissued
38      10148
14      7609
37      6944

bin 6 query:
select Violation_Code,count(*) TicketsIssued from vw_parking_violations_2017_partitioned_bins where Violation_Time_bin == 6 group by Violation_Code order by TicketsIssued desc limit 3;
output:
violation_code  ticketsissued
7       2602
40      2159
14      2091

7.) Now, try another direction. For the 3 most commonly occurring violation codes, find the most common times of day (in terms of the bins from the previous part)
query: select Violation_Time_bin, count(*) TicketsIssued from vw_parking_violations_2017_partitioned_bins where Violation_Code in (21,38,36) 
       group by Violation_Time_bin order by TicketsIssued desc limit 3;
output:
Violation_Time_bin  TicketsIssued
3       116785
4       76701
5       18437

8.) Letâ€™s try and find some seasonality in this data
a.) First, divide the year into some number of seasons, and find frequencies of tickets for each season. (Hint: A quick Google search reveals the following seasons in NYC: Spring(March, April, March); Summer(June, July, August); Fall(September, October, November); Winter(December, January, February))
query: create view vw_tickets_issued_2017_bins as 
select Violation_Code , Issuer_Precinct, 
case 
when MONTH(from_unixtime(unix_timestamp(Issue_Date,'mm/dd/yyyy'),'yyyy-mm-dd')) in (3,4,5) then 'spring' 
when MONTH(from_unixtime(unix_timestamp(Issue_Date,'mm/dd/yyyy'),'yyyy-mm-dd')) in (6,7,8) then 'summer' 
when MONTH(from_unixtime(unix_timestamp(Issue_Date,'mm/dd/yyyy'),'yyyy-mm-dd')) in (9,10,11) then 'autumn' 
when MONTH(from_unixtime(unix_timestamp(Issue_Date,'mm/dd/yyyy'),'yyyy-mm-dd')) in (1,2,12) then 'winter' 
else 'unknown' end  as season from parking_violations_issued_2017;

query: select season, count(*) as TicketsIssued from vw_tickets_issued_2017_bins group by season order by TicketsIssued desc;
output:
season  ticketsissued
spring  285863
winter  169474
summer  84564
autumn  0

b.)Then, find the 3 most common violations for each of these seasons.
spring:
query : select Violation_Code, count(*) as TicketsIssued from vw_tickets_issued_2017_bins where season = 'spring' group by Violation_Code order by TicketsIssued desc limit 3;
output:
Violation_Code  TicketsIssued
21      40045
36      34354
38      27001

winter:
query : select Violation_Code, count(*) as TicketsIssued from vw_tickets_issued_2017_partitioned_bins where season = 'winter' group by Violation_Code order by TicketsIssued desc limit 3;
output:
Violation_Code TicketsIssued
21      23684
36      22084
38      18450

summer:
query: select Violation_Code, count(*) as TicketsIssued from vw_tickets_issued_2017_partitioned_bins where season = 'summer' group by Violation_Code order by TicketsIssued desc limit 3;
output:
Violation_Code  TicketsIssued
21      12565
36      9655
38      8331

autumn:
query: select Violation_Code, count(*) as TicketsIssued from vw_tickets_issued_2017_partitioned_bins where  season = 'autumn' group by Violation_Code order by TicketsIssued desc limit 3;
output:
No data for autumn season
