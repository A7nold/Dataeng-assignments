1.  select name, population, area from world where area >= 3000000 OR population >= 25000000;
    
2.  select name from customer where referee_Id <> 2;

3.  select c.name as Customers from Customers c left join Orders o on c.id = o.customerId where o.customerId is null;

4.  SELECT employee_id, COUNT(employee_id) OVER (PARTITION BY team_id) AS team_size FROM Employee;

5.  select co.name AS country
    FROM
    person p
    JOIN
    country co
    ON SUBSTRING(phone_number,1,3) = country_code
    JOIN
    calls c
    ON p.id IN (c.caller_id, c.callee_id)
    GROUP BY
    co.name
    HAVING
    AVG(duration) > (SELECT AVG(duration) FROM calls);
    
6.  select player_id,first_login
    from(
    select player_id,event_date as first_login,dense_rank() over(partition by player_id order by event_date) as tmp
    from Activity) as tp
    where tmp =1;
    
7.  select customer_number
    from (select customer_number, count(order_number) as tmp from Orders 
    group by customer_number
    order by tmp desc) tp
    limit 1;
    
8.  select a.seat_id,
    from Cinema a join Cinema b
    on ABS(a.seat_id - b.seat_id) = 1
    where a.free = 1 AND b.free = 1
    order by a.seat_id;
    
9.  select name
    from SalesPerson 
    where sales_id not in (select o.sales_id 
    from SalesPerson s join Company c join Orders o
    on s.sales_id = o.sales_id AND c.com_id = o.com_id
    where c.name = 'RED');
    
10. SELECT 
    x, 
    y, 
    z, 
    IF(x + y > z AND y + z > x AND z + x > y, 'Yes', 'No') triangle 
    FROM
    triangle;
    
11. select min(abs(p1.x -  p2.x)) shortest 
    from point p1, point p2 
    where p1.x <> p2.x;
    
12. select actor_id,director_id
    from ActorDirector
    group by actor_id,director_id
    having count(timestamp) > 2;
    
13. select p.product_name, s.year, s.price
    from Product p
    join Sales s
    on s.product_id = p.product_id;
    
14. select project_id , round(avg(experience_years), 2) as average_years
    from project as p
    left join employee as e
    on p.employee_id = e.employee_id
    group by project_id;
    
15. select seller_id from Sales group by seller_id
    having sum(price) = (select sum(price) from sales group by seller_id order by sum(price) desc limit 1);
    
16. select distinct buyer_id from Sales s join Product p
    on p.product_id = s.product_id
    where p.product_name = 'S8'
    and buyer_id not in ( select buyer_id from Sales s join Product p on p.product_id = s.product_id where p.product_name = 'iPhone');
   
17. select visited_on, sum(amount) over(order by visited_on rows preceeding 6) a,round(avg(amount),2) over(order by visited_on rows preceeding 6) b
    from (select visited_on,sum(amount) as amount from Customer group by visited_on order by visited_on) a
    order by visited_on offset 6;
    
18. SELECT gender, day, SUM(score_points) OVER(PARTITION BY gender ORDER BY day) AS total
    FROM Scores
    group by gender,day order by gender,day;
    
19. WITH cte as
    select log_id,log_id - ROW_NUMBER() over (order by log_id) as diff
    from logs
    
    select min(log_id) as start_id,Max(log_id) as end_id
    from cte
    group by diff
    order by start_id;
    
20. WITH cte1 as
    (select * from Students cross join Subjects),
    cte2 as 
    (select student_id, subject_name, count(subject_name) as count from examinations group by student_id,student_name)
    
    select cte1.student_id,cte1.student_name,cte1.subject_name,ISNULL(cte2.count,0)
    from cte1 left join cte2
    on cte1.student_id = ct2.student_id and cte1.subject_name = cte2.subject_name
    order by cte1.student_id,cte1.subject_name;
    
21. SELECT e1.employee_id
    FROM Employees e1
    JOIN Employees e2
    ON e1.manager_id = e2.employee_id
    JOIN Employees e3
    ON e2.manager_id = e3.employee_id
    WHERE e3.manager_id = 1 AND e1.employee_id != 1;
    
22. select date_format(trans_date, '%Y-%m') as month, country, count(*) as trans_count,
    sum(if(state = 'approved', 1, 0)) as approved_count, sum(amount) as trans_total_amount,
    sum(if(state = 'approved', amount, 0)) as approved_total_amount
    from Transactions
    group by date_format(trans_date, '%Y-%m'), country;
    
23. select round(avg(daily_count), 2) as average_daily_percent
    from (select count(distinct b.post_id)/count(distinct a.post_id)*100 as daily_count
         from actions a
         left join removals b
         on a.post_id = b.post_id
         where extra = 'spam'
         group by action_date
         ) b ;
         
 24. SELECT round(sum(CASE
                      WHEN t1.event_date = t2.first_event+1 THEN 1
                      ELSE 0
                      END)/count(DISTINCT t1.player_id), 2) AS fraction
     FROM Activity AS t1
     INNER JOIN
     (SELECT player_id, min(event_date) AS first_event
     FROM Activity
     GROUP BY player_id) AS t2 ON t1.player_id = t2.player_id;
     
 25. SELECT round(sum(CASE
                      WHEN t1.event_date = t2.first_event+1 THEN 1
                      ELSE 0
                      END)/count(DISTINCT t1.player_id), 2) AS fraction
     FROM Activity AS t1
     INNER JOIN
     (SELECT player_id, min(event_date) AS first_event
     FROM Activity
     GROUP BY player_id) AS t2 ON t1.player_id = t2.player_id;
     
 26. 
    
    
