Python OOP Assignment
Q1. What is the purpose of Python's OOP?
sol: It is to bind the data and functions that work on the data together as a single unit so that no other code can access it.

Q2. Where does an inheritance search look for an attribute?
sol: Inheritance searches for attribute in the higher tree.

Q3. How do you distinguish between a class object and an instance object?
sol: Class object is a blueprint for th object which holds the functions and tasks whearas instance object is a particular instance of the class.

Q4. What makes the first argument in a class’s method function special?
sol: self is the first argument and its special becausse it represents the particular instance of the class and allows to use the the variables and attrbutes of the
     class uniquely.

Q5. What is the purpose of the init method?
sol: It's purpose is to initialize values that belong to a particular instance of the class which may or maynot be used.

Q6. What is the process for creating a class instance?
sol: class person():
        def __init__(self, name)
            print(self.name)
            
     obj1 = person("arnold")
     
Q7. What is the process for creating a class?
sol: class person():
        def __init__(self, name)
            print(self.name)
            
Q8. How would you define the superclasses of a class?
sol: The class whose properties gets inherited by another class is known as superclass or parent class.

Q9. What is the relationship between classes and modules?
sol: A class is described as. An empty class file. While a module is described as. A file for storing groups of functions or even classes. 

Q10. How do you make instances and classes?
sol: class person():
        def __init__(self, name)
            print(self.name)
            
     obj1 = person("arnold")
     
Q11. Where and how should be class attributes created?
sol: Class attribute should be placed outside of the __init__ method.
     class sampleclass:
         count = 0  #class_attribute
         
Q12. Where and how are instance attributes created?
sol: Instance attributes are created inside the funtcion or inside __init__.
     class Dog:

       def __init__(self, name, age):
           self.name = name     #instance attribute
           self.age = age       #instance attribute
           
Q13. What does the term "self" in a Python class mean?
sol: self is the first argument and its special becausse it represents the particular instance of the class and allows to use the the variables and attrbutes of the
     class uniquely.
     
Q14. How does a Python class handle operator overloading?
sol: By creating multiple methods with the same name but takes in unique arguments

Q15. When do you consider allowing operator overloading of your classes?
sol: when the class has methods having same name but different datatypes or arguments.

Q16. What is the most popular form of operator overloading?
sol: creating multiple methods with same name under the class is the most popular form and efficient one.

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?
sol: Both inheritance and polymorphism are key ingredients for designing robust, flexible, and easy-to-maintain software

Q18. Describe three applications for exception processing.
sol: * If we divide any number by zero, there occurs an ArithmeticException.
     * converting character variable into digits.
     * When an array exceeds to it's size
     
Q19. What happens if you don't do something extra to treat an exception?
sol: The code will crash,stop or throw a wrong output or error.

Q20. What are your options for recovering from an exception in your script?
sol: * Throwing try and except to handle the exception and continuing the code.
     * Catching Specific Exceptions in Python
     * Python try with else clause

Q21. Describe two methods for triggering exceptions in your script.
sol: TRY and RAISE.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of
     whether or not an exception exists.
sol: Finally and else

Q23. What is the purpose of the try statement?
sol: Try statement is used when the there is a posibility of an error occuring during runtime which is syntax correct but could throw execution error for a specific
     chunk of code.

Q24. What are the two most popular try statement variations?
sol: try and except/ try else and finally.

Q25. What is the purpose of the raise statement?
sol: Raise statement is trigger exceptions.

Q26. What does the assert statement do, and what other statement is it like?
sol: assert statemnt checks for a conditions and throws the exception or continues to execute which is similar try statement.

Q27. What is the purpose of the with/as argument, and what other statement is it like?
sol: with statement helps avoiding bugs and leaks by ensuring that a resource is properly released when the code using the resource is completely executed, it is
     similar to try statement.
     
Q28. What are *args, **kwargs?
sol: Passing a variable number of arguments to a function using special symbols.
     *args (Non-Keyword Arguments)
     **kwargs (Keyword Arguments)
     
Q29. How can I pass optional or keyword parameters from one function to another?
sol: To pass, collect the arguments using the * and ** in the function’s parameter list. Through this, you will get the positional arguments as a tuple and the 
     keyword arguments as a dictionary. Pass these arguments when calling another function by using * and **.
     
Q30. What are Lambda Functions?
sol: Python Lambda Functions are anonymous function means that the function is without a name.

Q31. Explain Inheritance in Python with an example?
sol: Inheritance is when you want to use the functions or attributed of other class(parent class) without rewriting the whole in a new class(child class).
     class Person(object):
         def __init__(self, name, id):
             self.name = name
             self.id = id
     
     class emp(person):
         def print()
             print(self.name)
             
     emp1 = emp("rahul",102)
     
     emp1.print()
     
Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?
sol: version from class A is invoked as it follows the manner from left to right

Q33. Which methods/functions do we use to determine the type of instance and inheritance?
sol: isinstance() and issubclass().

Q34. Explain the use of the 'nonlocal' keyword in Python.
sol: nonlocal keyword is used to reference a variable in the nearest scope. 

Q35. What is the global keyword?
sol: A global keyword is a keyword that allows a user to modify a variable outside the current scope.
