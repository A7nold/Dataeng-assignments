## Assignment Part-1
Q1. Why do we call Python as a general purpose and high-level programming language?
sol: General purpose because it can be used for a variety of development tasks and not just for specific domain, high level programming as it is object oriented and easily 
readable by humans.

Q2. Why is Python called a dynamically typed language?
sol: Python is called dynamically typed language as the variable need not be type mentioned as python automatically detects it.

Q3. List some pros and cons of Python programming language?
sol: Pros:
1) Easy to use 2) Easy to integrate 3) Multi-paradigm approach 4) High library support
Cons:
1) Slow speed of execution compared to C,C++ 2) Absence from mobile computing and browsers

Q4. In what all domains can we use Python?
sol: 
1) Machine learning 
2) Data Science and data analytics
3) IOT
4) Webdesign and gaming
5) application development

Q5. What are variable and how can we declare them?
sol: Variable is a name that is reference to an object once an object is assigned a variable we can access the object using the variable.
example: var = 20, arnold = 24

Q6. How can we take an input from the user in Python?
sol: input() function

Q7. What is the default datatype of the value that has been taken as an input using input() function?
sol: String

Q8. What is type casting?
sol: Type casting means changing the datatype of the variable.

Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?
sol: yes we can more then one input
example : a, b, c = input("Enter a,b and c: ").split(",")

Q10. What are keywords?
sol: Keywords in Python are reserved words that can not be used as a variable name, function name, or any other identifier.

Q11. Can we use keywords as a variable? Support your answer with reason.
sol: no we cannot use keyword as a variable as keywords are already defined terms with pre-determined task or value.

Q12. What is indentation? What's the use of indentaion in Python?
sol: Indentation is the whitespace used in Python. Indentation is used to create block of statement.

Q13. How can we throw some output in Python?
sol: print() function

Q14. What are operators in Python?
sol: Symbols or keywords used to perform certain operations on values or variable are known as operators.

Q15. What is difference between / and // operators?
sol: / is used for float division and // is used of floor (integer) division.

Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
```
sol: print("iNeuroniNeuroniNeuroniNeuron") or print("iNeuron"*3)

Q17. Write a code to take a number as an input from the user and check if the number is odd or even.
sol: num = float(input("Enter a number: "))
     if num%2 == 0:
       print(f"{num} is even")
     else:
       print(f"{num} is odd")
       
Q18. What are boolean operator?
sol: True , False , not , and , or are the only built-in Python Boolean operators.

Q19. What will the output of the following?
```
1 or 0

0 and 0

True and False and True

1 or 0 or 0
```
sol:
1 or 0 -> 1
0 and 0 -> 0
True and False and True -> False
1 or 0 or 0 -> 1

Q20. What are conditional statements in Python?
sol: In large projects we have to control the flow of execution of our program and we want to execute some set of statements only if the given condition is satisfied, 
     and a different set of statements when itâ€™s not satisfied.
     
Q21. What is use of 'if', 'elif' and 'else' keywords?
sol: if = first condition check for the condition.

elif = if "if" is False then elif's condition is checked.

else = else is checked when all the upper condition fails.

Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".
sol: age = input()
if age >= 18:
  print("I can vote")
else:
  print("I cant't vote")
  
 
Q23. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
sol:
sum=0
for i in numbers:
  if(i/2==0):
   sum = sum + i
  else:
   continue
print(sum)   

Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.
sol:
x, y, z = input("Enter 3 numbers seprated by comma: ").split(",")
if int(x) > int(y) and int(x) > int(z):
  print(f"{x} is greatest")
elif int(y) > int(z):
  print(f"{y} is greatest")
else:
  print(f"{z} is greatest")
  
Q25. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
sol:
numbers = [12, 75, 150, 180, 145, 525, 50]
lst = []
for num in numbers:
  if num > 150:
    if num > 500:
      break
  elif num%5==0:
    lst.append(num) 

print(lst)
Q26. What is a string? How can we declare string in Python?
sol: A collection of alphabets, words or characters.

Q27. How can we access the string using its index?
sol: string[] 

Q28. Write a code to get the desired output of the following

string = "Big Data iNeuron"
desired_output = "iNeuron"
sol:
string[9:16]

Q29. Write a code to get the desired output of the following

string = "Big Data iNeuron"
desired_output = "norueNi"
sol:
string[15:8:-1]

Q30. Resverse the string given in the above question.
sol:
string[::-1]

Q31. How can you delete entire string at once?
sol:
del keyword del(string)

Q32. What is escape sequence?
sol: Escape sequence has a special meaning when we use it inside the strings. As the name suggests, the escape character escapes the characters in a string for a brief moment to
     introduce unique inclusion.
     
Q33. How can you print the below string?

'iNeuron's Big Data Course'
sol: print('iNeuron's Big Data Course')

Q34. What is a list in Python?
sol: collection of things enclosed within [] seperated by commas

Q35. How can you create a list in Python?
sol: By using square brackets

Q36. How can we access the elements in a list?
sol: list[i], where i is Index

Q37. Write a code to access the word "iNeuron" from the given list.
lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
sol: lst[4][2]

Q38. Take a list as an input from the user and find the length of the list.
sol: lst = input("enter the values seperated by commas").split(',')
     print(len(lst))

Q39. Add the word "Big" in the 3rd index of the given list.
lst = ["Welcome", "to", "Data", "course"]
sol: lst.insert(2,"Big")

Q40. What is a tuple? How is it different from list?
sol: Tuple are collection of things same as list but enclosed within () and not []. Tuples are immutable compared to list which are mutable.

Q41. How can you create a tuple in Python?
sol: Enclosed within ().

Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.
sol: tple = ("bro","dude","homey")
     cannot add as tuple are immutable

Q43. Can two tuple be appended. If yes, write a code for it. If not, why?
sol: Yes two tuple can be appended.
     tup = ("arn")
     le = ("old")
     print(tup + le)

Q44. Take a tuple as an input and print the count of elements in it.
sol: tple = ("Welcome", "to", "Data", "course")
     print(len(tple))

Q45. What are sets in Python?
sol: A set is an unordered collection of data types that is iterable, mutable and has no duplicate elements. The order of elements in a set
     is undefined though it may consist of various elements.

Q46. How can you create a set?
sol: With {}.

Q47. Create a set and add "iNeuron" in your set.
sol: sett = {"iNeuron"}

Q48. Try to add multiple values using add() function.
sol: sett.add("arnold")
     sett.add("francis")

Q49. How is update() different from add()?
sol: We can add more than one element in a single go using update(), but using add() it's not possible.

Q50. What is clear() in sets?
sol: To remove all the elements from the set, clear() function is used.

Q51. What is frozen set?
sol: Elements of the frozen set cannot be manipulated or is mutable as compared to a set.

Q52. How is frozen set different from set?
sol: frozen set is immutable and set is mutable.

Q53. What is union() in sets? Explain via code.
sol: Union set contains elements all the elements from the parent sets.
     a = {2,5,6,7}
     b = {1,3,8,9}
     
     print( a U b is :,a | b)
     
Q54. What is intersection() in sets? Explain via code.
sol: Python set intersection() method returns a new set with an element that is common to all set.
     a = {2,5,6,7}
     b = {1,3,8,9}
     
     print( a intersection b is :,a & b)
     
Q55. What is dictionary ibn Python?
sol: Dictionary is a set of key value pairs.

Q56. How is dictionary different from all other data structures.
sol: Dictionary is having key and value pair where as all other data structures have only values in them.

Q57. How can we delare a dictionary in Python?
sol: With help of {}.

Q58. What will the output of the following?
var = {}
print(type(var))
sol: dict

Q59. How can we add an element in a dictionary?
sol: dict = {}
     dict["course"] = "big data"
     
Q60. Create a dictionary and access all the values in that dictionary.
sol: Dict = {"Name": "Arnold", "Experience": 2, "Organisation":"acct"}
     for i, j in Dict.items():
     print(f"Key is {i} and value is {j}")
     
Q61. Create a nested dictionary and access all the element in the inner dictionary.
sol: Dict = {"Name": {"f_name":"Arnold", "l_name":"Francis"}, "Experience": 2, "Organisation":"acct"}
     for i, j in Dict["Name"].items():
     print(f"Key is {i} and value is {j}")
     
Q62. What is the use of get() function?
sol: To access items from the dictionary

Q63. What is the use of items() function?
sol: Its used to acccess the elements or loop through the elements from the dictionary. 

Q64. What is the use of pop() function?
sol: Same as get is used to access the elements from the dictionary

Q65. What is the use of popitems() function?
sol: removes the last iinserted key value pair in the dictionary and returns it.

Q66. What is the use of keys() function?
sol: keys() method returns a view object that displays a list of all the keys in the dictionary.

Q67. What is the use of values() function?
sol: values() method returns a view object that displays a list of all the values in the dictionary.

Q68. What are loops in Python?
sol: Loops are iterations. for example for and while.

Q69. How many type of loop are there in Python?
sol: for and while loop

Q70. What is the difference between for and while loops?
sol: for loop can be used when iterations can be known while loops are used when iterations could go to an extend which is unknown.

Q71. What is the use of continue statement?
sol: Skips current iteration and continues to the next one.

Q72. What is the use of break statement?
sol: skips all the remaining iterations and breaks out of the loop.

Q73. What is the use of pass statement?
sol: Pass is null statement provided as a dummy.

Q74. What is the use of range() function?
sol: Range() function returns a sequence of numbers in a given range.

Q75. How can you loop over a dictionary?
sol: for key,value in data.items():
     print(key,value)
     
Coding problems
Q76. Write a Python program to find the factorial of a given number.
sol: fact = 1
     print("enter a number")
     num = int(input())

     for i in range(num,0,-1):
       fact = fact * i

     print(fact)
     
Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (PRT)/100
sol: def SI(p,r,t):
       si = (p*r*t)/100
       print(f"Simple interest is {si}")
       return si

     SI(8, 8, 6)
     
Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.
sol: def CI(p, r, t):
       amount = p*(1+r/100)**t
       ci = amount - p
       print(f"Compound intrest is {ci}")
       return ci

     CI(10000, 10.25, 5)
     
Q79. Write a Python program to check if a number is prime or not.
sol: def is_prime(n):
       prime_flag = 0

       if(n > 1):
         for i in range(2, int(sqrt(n)) + 1):
           if (n % i == 0):
           prime_flag = 1
           break
        if (prime_flag == 0):
          print(f"{n} is a prime number.")
        else:
          print(f"{n} is not a prime number.")
       else:
       print(f"{n} is not a prime number.")

     is_prime(134)
     
Q80. Write a Python program to check Armstrong Number.
sol: def check_armstrong(n):
       s = n
       b = len(str(n))
       sum1 = 0
       while n != 0:
           r = n % 10
           sum1 = sum1+(r**b)
           n = n//10
      if s == sum1:
         print(f"The given number {s} is armstrong number")
      else:
         print(f"The given number {s} is not armstrong number")

     check_armstrong(153)
     
Q81. Write a Python program to find the n-th Fibonacci Number.
sol: def Fibonacci(n):
	  if n<= 0:
		print("Incorrect input")
	  elif n == 1:
		return 0
	  elif n == 2:
		return 1
	  else:
		return Fibonacci(n-1)+Fibonacci(n-2)

     print(Fibonacci(7))
     
Q82. Write a Python program to interchange the first and last element in a list.
sol: def swap_list(newList):
	  temp = newList[0]
	  newList[0] = newList[-1]
	  newList[-1] = temp
	
	  return newList

     newList = [15, 12, 35, 17, 9, 56, 29]

     print(swap_list(newList))
     
Q83. Write a Python program to swap two elements in a list.
sol: def swap_list(newList):
     
        newList[0], newList[-1] = newList[-1], newList[0]
 
        return newList
     
     newList = [15, 12, 35, 17, 9, 56, 29]
     print(swap_list(newList))
     
Q84. Write a Python program to find N largest element from a list.
sol: def n_max_elements(list1, N):
	   final_list = []

	   for i in range(0, N):
		   max1 = 0
		
		     for j in range(len(list1)):	
		     	if list1[j] > max1:
				max1 = list1[j];
				
		     list1.remove(max1);
		     final_list.append(max1)
		
	   print(final_list)

     list1 = [2, 6, 41, 85, 0, 3, 7, 6, 10]
     N = 3

     n_max_elements(list1, N)
     
Q85. Write a Python program to find cumulative sum of a list.
sol: def cumulative_sum(lists):
	     cu_list = []
	     length = len(lists)
	     cu_list = [sum(lists[0:x]) for x in range(0, length+1)]
	     return cu_list[1:]

     lists = [10, 15, 30, 40, 50]
     print(f"Cumulative sum of the list is {cumulative_sum(lists)}")
     
Q86. Write a Python program to check if a string is palindrome or not.
sol: def pallind(s):
	if s == s[::-1]:
		print(s,"is a pallindrome")
	else:
		print(s,"is not a pallindrome")

     print("enter a string")
     s = str(input())

     pallind(s)
     
Q87. Write a Python program to remove i'th element from a string.
sol: def remove_ith_element(i):
     str1 = "Big Data Bootcamp"
     str2 = ""

     for n in range(len(str1)):
      if n == i:
        continue
      else:
        str2 = str2 + str1[n]

     return str2

     remove_ith_element(5)
     
Q88. Write a Python program to check if a substring is present in a given string.
sol: def check_substring(s2, s1):
	if (s2.count(s1) > 0):
		print(s1,"is a substring of ",s2)
	else:
		print(s1,"is not a substring of ",s2)


     print("enter first string")
     s2 = str(input())
     print("enter sec string")
     s1 = str(input())
     check_substring(s2, s1)
     
Q89. Write a Python program to find words which are greater than given length k.
sol: def string_greater_than_k(k, str):
	
	string = []

	text = str.split(" ")

	for x in text:

		if len(x) > k:

			string.append(x)

	return string

     k = 3
     str ="Big Data Bootcamp"
     print(string_greater_than_k(k, str))
     
Q90. Write a Python program to extract unquire dictionary values.
sol: test_dict = {'iNeuron': [5, 6, 7, 8],
			'is': [10, 11, 7, 5],
			'best': [6, 12, 10, 8],
			'for': [1, 2, 5],
      'big data': [2, 7, 12, 9]
      }

     print("The original dictionary is : " + str(test_dict))

     res = list(sorted({i for i in test_dict.values() for i in i}))

     print("The unique values list is : " + str(res))
     
Q91. Write a Python program to merge two dictionary.
sol: def Merge(dict1, dict2):
	 dict1.update(dict2)

     dict1 = {'a': 10, 'b': 8}
     dict2 = {'d': 6, 'c': 4}

     Merge(dict1, dict2)

     print(dict1)
     
Q92. Write a Python program to convert a list of tuples into dictionary.
Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}
sol: print (dict([('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]))

Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.
Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]
sol: res = [(val, pow(val, 3)) for val in list1]

Q94. Write a Python program to get all combinations of 2 tuples.

Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]
sol: test_tuple1 = (7, 2)
     test_tuple2 = (7, 8)

     res = [(a, b) for a in test_tuple1 for b in test_tuple2]
     res = res + [(a, b) for a in test_tuple2 for b in test_tuple1]

     print("The filtered tuple : ", str(res))
     
Q95. Write a Python program to sort a list of tuples by second item.

Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]
sol: def Sort_Tuple(tup):
     
     lst = len(tup)
     for i in range(0, lst):
         
        for j in range(0, lst-i-1):
            if (tup[j][1] > tup[j + 1][1]):
                temp = tup[j]
                tup[j]= tup[j + 1]
                tup[j + 1]= temp
     return tup
 
     tup =[('452', 10), ('256', 5), ('100', 20), ('135', 15)]
       
     print(Sort_Tuple(tup))
     
Q96. Write a python program to print below pattern.

* 
* * 
* * * 
* * * * 
* * * * * 
Q97. Write a python program to print below pattern.

    *
   **
  ***
 ****
*****
Q98. Write a python program to print below pattern.

    * 
   * * 
  * * * 
 * * * * 
* * * * * 
Q99. Write a python program to print below pattern.

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5
Q100. Write a python program to print below pattern.

A 
B B 
C C C 
D D D D 
E E E E E 
