
1. WITH activity_stat_by_user AS(
   SELECT
    *,
    DENSE_RANK() OVER(PARTITION BY username ORDER BY start_date) AS activity_serial,
    COUNT(*) OVER(PARTITION BY username) AS total_activity_count_by_user
   FROM
    user_activity
   )
   SELECT
   username,
   activity,
   start_date,
   end_date
   FROM
   activity_stat_by_user
   WHERE
   CASE
    WHEN total_activity_count_by_user = 1
      THEN 1
    WHEN activity_serial = 2
      THEN 1
   END = 1
   ;
   
2. WITH activity_stat_by_user AS(
   SELECT
    *,
    DENSE_RANK() OVER(PARTITION BY username ORDER BY start_date) AS activity_serial,
    COUNT(*) OVER(PARTITION BY username) AS total_activity_count_by_user
   FROM
    user_activity
   )
   SELECT
   username,
   activity,
   start_date,
   end_date
   FROM
   activity_stat_by_user
   WHERE
   CASE
    WHEN total_activity_count_by_user = 1
      THEN 1
    WHEN activity_serial = 2
      THEN 1
   END = 1
   ;
   
3. SELECT name
   FROM students
   WHERE marks > 75
   ORDER BY RIGHT(name, 3),id;
   
4. SELECT name
   FROM employee
   WHERE salary > 2000 AND months < 10
   ORDER BY employee_id;
   
5.  SELECT a,b,c,
    CASE
    WHEN a + b <= c OR b + c <= a OR c + a <= b
      THEN 'Not A Triangle'
    WHEN a = b AND b = c
      THEN 'Equilateral'
    WHEN a = b AND b=c or b = c AND a = b
      THEN 'Isosceles'
    ELSE
      'Scalene'
     END AS triangle_type
    FROM triangles;  

6.  select ceil(avg(salary) - avg(replace(salary, '0', ''))) from EMPLOYEES;

7.  select MAX(salary*months), COUNT(*) from Employee where (salary * months) = (select MAX(salary * months) from Employee);

8.  (
       SELECT CONCAT(NAME, '(', SUBSTRING(Occupation, 1, 1), ')') as THETEXT, '1' as SELECTNUMBER
       FROM OCCUPATIONS
    )
    UNION ALL 
    (
       SELECT CONCAT('There are total ', COUNT(*),' ', Occupation, (IF (COUNT(*) > 1, 's',''))) as THETEXT, '2' as SELECTNUMBER
       FROM OCCUPATIONS GROUP BY Occupation
    )
    ORDER BY SELECTNUMBER ASC, THETEXT ASC;
    
9.  select * from occupations o ;

    (
       SELECT CONCAT(NAME, '(', SUBSTRING(Occupation, 1, 1), ')') as THETEXT
       FROM OCCUPATIONS
       order by 1
    )
    UNION ALL 
    (
       SELECT CONCAT('There are total ', COUNT(*),' ', Occupation, (IF (COUNT(*) > 1, 's',''))) as THETEXT
       FROM OCCUPATIONS GROUP BY Occupation
    );
    
10. WITH serialized_ocp AS(
     SELECT
      name,
      occupation,
      row_number() over(partition by occupation order by name) as serial
     FROM
     occupations
    )
    SELECT MAX(CASE WHEN occupation = 'Doctor' THEN name END) AS Doctor,
           MAX(CASE WHEN occupation = 'Professor' THEN name END) AS Professor,
           MAX(CASE WHEN occupation = 'Singer' THEN name END) AS Singer,
           MAX(CASE WHEN occupation = 'Actor' THEN name END) AS Actor
    FROM serialized_ocp
    GROUP BY serial;
    
11. SELECT n,
    CASE  WHEN p IS NULL THEN 'Root'
         WHEN n IN ( SELECT p FROM bst) THEN 'Inner'
         ELSE 'Leaf'
    END as node_type
    FROM bst
    ORDER BY n;
    
12. SELECT c.company_code, c.founder, COUNT(DISTINCT e.lead_manager_code), COUNT(DISTINCT e.senior_manager_code), COUNT(DISTINCT e.manager_code), COUNT(DISTINCT e.employee_code) 
    FROM Company c JOIN Employee e ON c.company_code = e.company_code GROUP BY c.company_code, c.founder ORDER BY c.company_code;
    
13. select listagg(Prime_Number,'&') within group(order by Prime_Number)
    from (select L Prime_Number from
     (select Level L 
     from Dual
     connect by Level <= 1000),
     (select Level M
     from Dual
     connect by Level <= 1000)
     where M <= L
     group by L
     having count(case when L/M = trunc(L/M) then 'Y' end) = 2
     order by L);
     
14. 
